/* tslint:disable */
/* eslint-disable */
/**
 * Eve API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { IndustryActivityProduct } from '../models';
/**
 * IndustryActivityProductsApi - axios parameter creator
 * @export
 */
export const IndustryActivityProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [typeId] 
         * @param {number} [activityId] 
         * @param {number} [productTypeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIndustryActivityProductsGet: async (typeId?: number, activityId?: number, productTypeId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/industry-activity-products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (typeId !== undefined) {
                localVarQueryParameter['typeId'] = typeId;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activityId'] = activityId;
            }

            if (productTypeId !== undefined) {
                localVarQueryParameter['productTypeId'] = productTypeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} typeId 
         * @param {number} activityId 
         * @param {number} productTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet: async (typeId: number, activityId: number, productTypeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeId' is not null or undefined
            assertParamExists('apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet', 'typeId', typeId)
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet', 'activityId', activityId)
            // verify required parameter 'productTypeId' is not null or undefined
            assertParamExists('apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet', 'productTypeId', productTypeId)
            const localVarPath = `/api/industry-activity-products/{typeId}/{activityId}/{productTypeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)))
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)))
                .replace(`{${"productTypeId"}}`, encodeURIComponent(String(productTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndustryActivityProductsApi - functional programming interface
 * @export
 */
export const IndustryActivityProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndustryActivityProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [typeId] 
         * @param {number} [activityId] 
         * @param {number} [productTypeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIndustryActivityProductsGet(typeId?: number, activityId?: number, productTypeId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IndustryActivityProduct>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIndustryActivityProductsGet(typeId, activityId, productTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndustryActivityProductsApi.apiIndustryActivityProductsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} typeId 
         * @param {number} activityId 
         * @param {number} productTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet(typeId: number, activityId: number, productTypeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndustryActivityProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet(typeId, activityId, productTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndustryActivityProductsApi.apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IndustryActivityProductsApi - factory interface
 * @export
 */
export const IndustryActivityProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndustryActivityProductsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [typeId] 
         * @param {number} [activityId] 
         * @param {number} [productTypeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIndustryActivityProductsGet(typeId?: number, activityId?: number, productTypeId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<IndustryActivityProduct>> {
            return localVarFp.apiIndustryActivityProductsGet(typeId, activityId, productTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} typeId 
         * @param {number} activityId 
         * @param {number} productTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet(typeId: number, activityId: number, productTypeId: number, options?: RawAxiosRequestConfig): AxiosPromise<IndustryActivityProduct> {
            return localVarFp.apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet(typeId, activityId, productTypeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndustryActivityProductsApi - object-oriented interface
 * @export
 * @class IndustryActivityProductsApi
 * @extends {BaseAPI}
 */
export class IndustryActivityProductsApi extends BaseAPI {
    /**
     * 
     * @param {number} [typeId] 
     * @param {number} [activityId] 
     * @param {number} [productTypeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustryActivityProductsApi
     */
    public apiIndustryActivityProductsGet(typeId?: number, activityId?: number, productTypeId?: number, options?: RawAxiosRequestConfig) {
        return IndustryActivityProductsApiFp(this.configuration).apiIndustryActivityProductsGet(typeId, activityId, productTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} typeId 
     * @param {number} activityId 
     * @param {number} productTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustryActivityProductsApi
     */
    public apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet(typeId: number, activityId: number, productTypeId: number, options?: RawAxiosRequestConfig) {
        return IndustryActivityProductsApiFp(this.configuration).apiIndustryActivityProductsTypeIdActivityIdProductTypeIdGet(typeId, activityId, productTypeId, options).then((request) => request(this.axios, this.basePath));
    }
}

